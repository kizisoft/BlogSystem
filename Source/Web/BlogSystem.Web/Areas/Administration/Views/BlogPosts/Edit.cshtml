@model BlogSystem.Web.Areas.Administration.ViewModels.BlogPost.BlogPostInputModel

@{
    ViewBag.Title = "Edit Blog Post";
}

<h2>@ViewBag.Title</h2>
<hr />
<br />

@using (Html.BeginForm("Edit", "BlogPosts", FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken();
    @Html.ValidationSummary(false, "", new { @class = "text-danger" });
    @Html.HiddenFor(model => model.Id);

    <div class="form-group">
        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SubTitle, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SubTitle, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SubTitle, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ShortContent, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ShortContent, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ShortContent, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
            <div id="tag-info" class="text-primary hidden">Tip: Input a tag and press Enter to add it.</div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MetaDescription, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MetaDescription, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MetaDescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MetaKeywords, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MetaKeywords, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MetaKeywords, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsCommentsDisabled, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-1 pull-left">
            @Html.EditorFor(model => model.IsCommentsDisabled, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.IsCommentsDisabled, "", new { @class = "text-danger" })
        </div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-4">
            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default pull-left" })
            <button on type="submit" class="btn btn-success pull-right">Save Changes</button>
        </div>
    </div>
}

@section scripts {
    <script type="text/javascript" src="~/Scripts/main.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            var $root = $('.tags-root'),
                $input = $('.tag-input');

            $root.on('keypress', function (e) {
                if (e.keyCode === 13) {
                    e.preventDefault();
                    var val = $input.val().toLowerCase();
                    $root.prepend($('<span class="tag">\n' + val +
                        '\n<span class="glyphicon glyphicon-remove"></span></span><input class="tag-name" type="hidden" name="Tags[' +
                        $root.find('.tag-name').length + '].Name" value="' + val + '" />'));
                    $input.val('');
                }
            });

            $root.on('click', '.glyphicon', function (e) {
                var $span = $(this).parent();
                $span.next('input').remove();
                $span.remove();
                var $inputs = $root.find('.tag-name');
                for (var i = 0; i < $inputs.length; i++) {
                    $inputs[i].name = 'Tags[' + i + '].Name';
                }

                $input.focus();
            });

            $root.on('focus', function (e) {
                $(this).addClass('focused');
                $('#tag-info').removeClass('hidden');
                $input.focus();
            });

            $input.on('focus', function (e) {
                $root.addClass('focused');
                $('#tag-info').removeClass('hidden');
            });

            $input.on('blur', function (e) {
                $root.removeClass('focused');
                $('#tag-info').addClass('hidden');
            });

            $input.on('input', function (e) {
                var xhr = new XMLHttpRequest();
                $(xhr).on('load', function (e) {
                    if (e.target.status != 200) {
                        showJsonError(e.target)
                        return false;
                    }

                    var tags = JSON.parse(e.target.response);
                });
                var path = '@Url.Action("Find", "Tags")' + '?key=' + $input.val();
                xhr.open('GET', path, true);
                xhr.send();
            });
        });
    </script>
}