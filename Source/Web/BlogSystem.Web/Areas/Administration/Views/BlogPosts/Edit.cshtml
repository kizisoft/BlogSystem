@model BlogSystem.Web.Areas.Administration.ViewModels.BlogPost.BlogPostInputModel

@{
    ViewBag.Title = "Edit Blog Post";
}

<h2>@ViewBag.Title</h2>
<hr />
<br />

@using (Html.BeginForm("Edit", "BlogPosts", FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken();
    @Html.ValidationSummary(false, "", new { @class = "text-danger" });
    @Html.HiddenFor(model => model.Id);

    <div class="form-group">
        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SubTitle, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SubTitle, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SubTitle, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ShortContent, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ShortContent, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ShortContent, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MetaDescription, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MetaDescription, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MetaDescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MetaKeywords, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MetaKeywords, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MetaKeywords, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsCommentsDisabled, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-1 pull-left">
            @Html.EditorFor(model => model.IsCommentsDisabled, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.IsCommentsDisabled, "", new { @class = "text-danger" })
        </div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-4">
            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default pull-left" })
            <button type="submit" class="btn btn-success pull-right">Save Changes</button>
        </div>
    </div>
}

@section scripts {
    <script type="text/javascript" src="~/Scripts/main.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            var $root = $('.tags-root'),
                $input = $('.tag-input'),
                $info = $('#tag-info'),
                $tags = $('#tags'),
                isTagOperation = false,
                isFocusLooseInProgress = false;

            $root.on('keypress', onKeypressHandler);
            $root.on('click', '.glyphicon', removeTagHandler);
            $root.on('click', takeRootFocusHandler);
            $root.on('focus', takeRootFocusHandler);

            $input.on('focus', takeFocusHandler);
            $input.on('blur', looseFocusHandler);
            $input.on('input', onInputHandler);

            $tags.on('click', 'a', selectTagHandler);

            function onKeypressHandler(e) {
                if (e.keyCode === 13) {
                    e.preventDefault();
                    var val = $input.val().toLowerCase();
                    $root.prepend($('<span class="tag">\n' + val +
                        '\n<span class="glyphicon glyphicon-remove"></span></span><input class="tag-name" type="hidden" name="Tags[' +
                        $root.find('.tag-name').length + '].Name" value="' + val + '" />'));
                    $input.val('');
                    checkInput();
                }
            }

            function removeTagHandler(e) {
                var $span = $(this).parent();
                isTagOperation = true;
                checkInput(true);
                $span.next('input').remove();
                $span.remove();
                var $inputs = $root.find('.tag-name');
                for (var i = 0, length = $inputs.length; i < length; i++) {
                    $inputs[i].name = 'Tags[' + i + '].Name';
                }
            }

            function takeRootFocusHandler(e) {
                $input.focus();
                if (isFocusLooseInProgress) {
                    isTagOperation = true;
                }
            }

            function takeFocusHandler(e) {
                $root.addClass('focused');
                $info.removeClass('hidden');
            }

            function looseFocusHandler(e) {
                isFocusLooseInProgress = true;
                setTimeout(function () {
                    if (isTagOperation) {
                        isTagOperation = false;
                    } else {
                        $root.removeClass('focused');
                        $info.addClass('hidden');
                    }

                    $tags.addClass('hidden');
                    isFocusLooseInProgress = false;
                }, 300);
            }

            function selectTagHandler(e) {
                var tagName = $(this).data('name');
                $input.val(tagName);
                isTagOperation = true;
            }

            function onInputHandler(e) {
                var path = '@Url.Action("Find", "Tags")' + '?key=' + $input.val(),
                    xhr = new XMLHttpRequest();
                $(xhr).on('load', onLoadHandler);
                xhr.open('GET', path, true);
                xhr.send();
            }

            function onLoadHandler(e) {
                if (e.target.status !== 200) {
                    showJsonError(e.target)
                    return false;
                }

                var tags = JSON.parse(e.target.response),
                    tagsCount = tags.length;
                $tags.find('li').remove();
                if (tagsCount > 0) {
                    $tags.removeClass('hidden');
                    for (var i = 0; i < tagsCount; i++) {
                        $tags.append('<li><a data-name="' + tags[i].Name + '"><span class="glyphicon glyphicon-tag"></span>' + tags[i].Name + '</a></li>');
                    }
                } else {
                    $tags.addClass('hidden');
                }
            }

            function checkInput(isFocused) {
                var tagcCount = $root.find('.tag-name').length;
                if (tagcCount == 3) {
                    $input.toggleClass('hidden');
                    if (isFocused) {
                        $root.find('input.tag-name').focus();
                    }
                }
            }
        });
    </script>
}